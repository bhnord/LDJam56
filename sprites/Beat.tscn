[gd_scene load_steps=3 format=3 uid="uid://b0cqwrcnsb7vb"]

[ext_resource type="Texture2D" uid="uid://6i7ey6wt6b8j" path="res://sprites/beat-01.png" id="1_fpmvt"]

[sub_resource type="GDScript" id="GDScript_3ua11"]
script/source = "extends Node2D

signal beat_finished

var speed = 200
var target_position
var disappear_time = .05
var is_indicator;
var lively_color = Color(1.0, 0.51, 0.37, 1.0)  # Vibrant orange

func init(is_i: bool):
	is_indicator = is_i
	
# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	get_tree().get_root().size_changed.connect(resize) 
	target_position = Vector2(get_viewport_rect().size[0]/2, get_viewport_rect().size[1] - 50)
	add_to_group(\"beats\" if is_indicator else \"hidden_beats\")
	$\"Beat-01\".modulate = lively_color


func resize():
	var old_viewport_size = Vector2(target_position.x * 2, get_viewport_rect().size.y)
	var new_viewport_size = get_viewport_rect().size
	var old_center = old_viewport_size / 2
	var new_center = new_viewport_size / 2
	
	# Calculate the offset from the old center
	var offset = position - old_center
	
	# Update the position, maintaining the same offset from the new center
	position = Vector2(new_center.x + offset.x, new_viewport_size.y - 50)
	
	# Update the target position
	target_position = Vector2(new_center.x, new_viewport_size.y - 50)

# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta: float) -> void:
	var direction = (target_position - position).normalized();
	
	# Preventing oscillating beats that never despawn
	var old_distance = position.distance_to(target_position);
	var new_position = position + direction * speed * delta;
	var new_distance = new_position.distance_to(target_position);
	if will_cause_overshoot(old_distance, new_distance):
		position = target_position
	else:
		position = new_position
		
	if abs(position.distance_to(target_position)) < 5:
		$DisappearTimer.start(disappear_time)
		set_process(false)

func will_cause_overshoot(old_distance, new_distance):
	return (old_distance > 0) != (new_distance > 0)


func _on_disappear_timer_timeout():
	emit_signal(\"beat_finished\")
	queue_free()
"

[node name="Beat" type="Node2D"]
script = SubResource("GDScript_3ua11")

[node name="Beat-01" type="Sprite2D" parent="."]
scale = Vector2(0.5, 0.5)
texture = ExtResource("1_fpmvt")

[node name="DisappearTimer" type="Timer" parent="."]
one_shot = true

[connection signal="timeout" from="DisappearTimer" to="." method="_on_disappear_timer_timeout"]
